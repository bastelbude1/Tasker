#!/bin/bash

# TASKER Security Review using Claude Code /security-review
# Focus: Input validation, command execution, subprocess safety

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
REPORT_DIR="$SCRIPT_DIR/../reports"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}🔒 TASKER Security Review using Claude Code /security-review${NC}"
echo "Focus: Input validation, command execution, subprocess safety"
echo "Timestamp: $(date)"
echo ""

# Change to project root for proper file context
cd "$PROJECT_ROOT"

# Create TASKER-specific security context file
CONTEXT_FILE="$REPORT_DIR/security_context.md"
cat > "$CONTEXT_FILE" << 'EOF'
# TASKER Security Review Context

## System Overview
TASKER is a Python 3.6.8 task automation system that executes commands on remote hosts via subprocess calls.

## Critical Security Areas
1. **Command Injection**: User-provided commands executed via subprocess.Popen()
2. **Input Validation**: Task file parameters, hostnames, arguments
3. **File Handling**: Reading task files, writing logs, temporary files
4. **Privilege Escalation**: Remote command execution via pbrun/sudo
5. **Path Traversal**: File operations with user-controlled paths

## Key Files to Analyze
- tasker.py: Main execution engine
- tasker/core/: Core task processing logic
- tasker/executors/: Command execution handlers
- tasker/validation/: Input validation modules

## Python 3.6.8 Security Constraints
- Must use subprocess.Popen() instead of subprocess.run()
- Limited to standard library only
- No modern security libraries available

## Security Requirements
- No external dependencies allowed
- All user input must be validated
- Command execution must prevent injection
- File operations must be path-safe
- Error messages must not leak sensitive information
EOF

echo -e "${YELLOW}📋 Security Review Context:${NC}"
echo "- Command injection prevention in subprocess execution"
echo "- Input validation for task file parameters"
echo "- File handling security for logs and temporary files"
echo "- Safe handling of user-provided hostnames and commands"
echo "- Python 3.6.8 security constraints compliance"
echo ""

# Security-focused file list
SECURITY_FILES=(
    "tasker.py"
    "tasker/core/task_executor_main.py"
    "tasker/core/condition_evaluator.py"
    "tasker/core/execution_context.py"
    "tasker/core/streaming_output_handler.py"
    "tasker/core/task_runner.py"
    "tasker/core/utilities.py"
    "tasker/executors/base_executor.py"
    "tasker/executors/conditional_executor.py"
    "tasker/executors/parallel_executor.py"
    "tasker/executors/sequential_executor.py"
    "tasker/validation/host_validator.py"
    "tasker/validation/input_sanitizer.py"
    "tasker/validation/task_validator.py"
)

echo -e "${BLUE}🎯 Files under security review:${NC}"
for file in "${SECURITY_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        echo "  ✅ $file"
    else
        echo "  ❌ $file (not found)"
    fi
done
echo ""

# Generate security review report
REPORT_FILE="$REPORT_DIR/security_review_$(date +%Y%m%d_%H%M%S).md"

echo -e "${GREEN}🚀 Starting Claude Code security review...${NC}"
echo ""

# Note: This is a template for the security review command
# The actual /security-review command would be triggered manually or via Claude Code interface
cat > "$REPORT_FILE" << EOF
# TASKER Security Review Report
**Generated**: $(date)
**Review Type**: Security Analysis using Claude Code /security-review
**Focus Areas**: Command injection, input validation, file handling, subprocess security

## Files Reviewed
$(for file in "${SECURITY_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        echo "- ✅ $file"
    else
        echo "- ❌ $file (not found)"
    fi
done)

## Security Context Applied
- Python 3.6.8 task automation system
- Remote command execution via subprocess.Popen()
- User-controlled input from task files
- No external security libraries available
- Standard library security patterns only

## Review Command Template
\`\`\`bash
# Manual execution in Claude Code:
/security-review

# With context focus on:
# - Command injection in subprocess calls
# - Input validation vulnerabilities
# - File handling security issues
# - Privilege escalation prevention
# - Path traversal protection
\`\`\`

## Instructions for Manual Review
1. Open Claude Code in the TASKER project directory
2. Use the /security-review command
3. Focus on the files listed above
4. Apply the security context from: $CONTEXT_FILE
5. Look for the specific vulnerability patterns mentioned

## Expected Findings Areas
- [ ] Subprocess command construction safety
- [ ] Input sanitization completeness
- [ ] File path validation
- [ ] Error message information leakage
- [ ] Authentication/authorization bypass
- [ ] Logging security (sensitive data exposure)

---
*This report template was generated by the TASKER security review orchestration script.*
*Complete the review by executing /security-review in Claude Code with the above context.*
EOF

echo -e "${GREEN}✅ Security review template generated: $REPORT_FILE${NC}"
echo ""
echo -e "${YELLOW}📋 Next Steps:${NC}"
echo "1. Open Claude Code in this project directory"
echo "2. Execute: /security-review"
echo "3. Focus on files: ${SECURITY_FILES[*]}"
echo "4. Apply security context from: $CONTEXT_FILE"
echo "5. Update the report with findings: $REPORT_FILE"
echo ""
echo -e "${BLUE}🎯 Security Focus Areas:${NC}"
echo "- Command injection prevention"
echo "- Input validation completeness"
echo "- File handling security"
echo "- Subprocess execution safety"
echo "- Error message security"