# COMPREHENSIVE LOCAL RETRY TEST
# Tests parallel and conditional tasks with retry logic using local Linux commands
# Uses toggle_exit.sh and increment_counter.sh to simulate failing then succeeding tasks

# === GLOBAL VARIABLES ===
HOSTNAME=localhost
EXEC=local
RETRY_COUNT=3
RETRY_DELAY=2
TIMEOUT=15

# === PHASE 1: SETUP AND CLEANUP ===

# Task 0: Setup - Clean any existing state files
task=0
hostname=@HOSTNAME@
command=rm
arguments=-f $HOME/.toggle_value $HOME/.my_counter $HOME/.task_*
exec=@EXEC@
timeout=@TIMEOUT@

# Task 1: Make scripts executable
task=1
hostname=@HOSTNAME@
command=chmod
arguments=+x toggle_exit.sh increment_counter.sh
exec=@EXEC@
timeout=@TIMEOUT@

# === PHASE 2: PARALLEL RETRY TEST ===

task=2
hostname=@HOSTNAME@
command=echo
arguments=PHASE 2 - Starting Parallel Retry Test
exec=@EXEC@

# Task 3: Parallel execution with retry - mix of success, retry-success, and failure
task=3
type=parallel
max_parallel=4
tasks=100,101,102,103
timeout=@TIMEOUT@
retry_failed=true
retry_count=@RETRY_COUNT@
retry_delay=@RETRY_DELAY@
next=min_success=3
on_success=4
on_failure=90

task=4
hostname=@HOSTNAME@
command=echo
arguments=PHASE 2 PASSED - Parallel retry test succeeded with min_success=3
exec=@EXEC@

# === PHASE 3: CONDITIONAL RETRY TEST ===

task=5
hostname=@HOSTNAME@
command=echo
arguments=PHASE 3 - Starting Conditional Retry Test - Environment Check
exec=@EXEC@

# Task 6: Conditional based on user environment
task=6
type=conditional
condition=@HOSTNAME@=localhost
if_true_tasks=200,201,202
timeout=@TIMEOUT@
retry_failed=true
retry_count=@RETRY_COUNT@
retry_delay=@RETRY_DELAY@
next=min_success=2
on_success=7
on_failure=91

task=7
hostname=@HOSTNAME@
command=echo
arguments=PHASE 3 PASSED - Conditional retry test succeeded for localhost environment
exec=@EXEC@

# === PHASE 4: MIXED PARALLEL AND CONDITIONAL WITH RETRY ===

task=8
hostname=@HOSTNAME@
command=echo
arguments=PHASE 4 - Mixed Parallel and Conditional with Complex Retry Scenarios
exec=@EXEC@

# Task 9: Parallel with high retry count
task=9
type=parallel
max_parallel=3
tasks=300,301,302
timeout=@TIMEOUT@
retry_failed=true
retry_count=4
retry_delay=1
next=max_failed=1
on_success=10
on_failure=92

task=10
hostname=@HOSTNAME@
command=echo
arguments=PHASE 4A PASSED - High retry count parallel execution succeeded
exec=@EXEC@

# Task 11: Conditional with toggle-based retry
task=11
type=conditional  
condition=@HOSTNAME@=localhost
if_true_tasks=400,401
if_false_tasks=402
timeout=@TIMEOUT@
retry_failed=true
retry_count=2
retry_delay=1
next=all_success
on_success=12
on_failure=93

task=12
hostname=@HOSTNAME@
command=echo
arguments=PHASE 4B PASSED - Toggle-based conditional retry succeeded
exec=@EXEC@

# === PHASE 5: FINAL SUCCESS ===

task=13
hostname=@HOSTNAME@
command=echo
arguments=ALL RETRY TESTS COMPLETED SUCCESSFULLY - Both parallel and conditional retry logic working
exec=@EXEC@
next=never

# === ERROR HANDLERS ===

task=90
hostname=@HOSTNAME@
command=echo
arguments=ERROR - Phase 2 Parallel retry test failed
exec=@EXEC@
return=1

task=91
hostname=@HOSTNAME@
command=echo
arguments=ERROR - Phase 3 Conditional retry test failed
exec=@EXEC@
return=1

task=92
hostname=@HOSTNAME@
command=echo
arguments=ERROR - Phase 4A High retry count test failed
exec=@EXEC@
return=1

task=93
hostname=@HOSTNAME@
command=echo
arguments=ERROR - Phase 4B Toggle-based conditional test failed
exec=@EXEC@
return=1

# === FIREWALL ===
task=99
return=0

# ===============================================
# PARALLEL AND CONDITIONAL TASK DEFINITIONS
# ===============================================

# PHASE 2: Parallel Retry Tasks (100-103)

# Task 100: Always succeeds immediately
task=100
hostname=@HOSTNAME@
command=echo
arguments=Task 100 - Immediate success
exec=@EXEC@

# Task 101: Uses toggle_exit.sh - fails first time, succeeds on retry
task=101
hostname=@HOSTNAME@
command=toggle_exit.sh
exec=@EXEC@

# Task 102: Uses increment_counter.sh with custom success condition
task=102
hostname=@HOSTNAME@
command=increment_counter.sh
exec=@EXEC@
success=exit_0&stdout~2

# Task 103: Simulated failure then success using test command with file creation
task=103
hostname=@HOSTNAME@
command=sh
arguments=-c "if [ ! -f $HOME/.task103_attempt ]; then touch $HOME/.task103_attempt; echo 'Task 103 - First attempt fails'; exit 1; else echo 'Task 103 - Retry succeeds'; exit 0; fi"
exec=@EXEC@

# PHASE 3: Conditional Retry Tasks (200-202)

# Task 200: Quick success
task=200
hostname=@HOSTNAME@
command=echo
arguments=Conditional Task 200 - Quick success
exec=@EXEC@

# Task 201: Uses toggle_exit.sh for conditional retry test
task=201
hostname=@HOSTNAME@
command=toggle_exit.sh
exec=@EXEC@

# Task 202: Counter-based task that needs multiple attempts
task=202
hostname=@HOSTNAME@
command=sh
arguments=-c "attempts=$(cat $HOME/.task202_counter 2>/dev/null || echo 0); attempts=$((attempts + 1)); echo $attempts > $HOME/.task202_counter; if [ $attempts -le 1 ]; then echo \"Task 202 - Attempt $attempts fails\"; exit 1; else echo \"Task 202 - Attempt $attempts succeeds\"; exit 0; fi"
exec=@EXEC@

# PHASE 4A: High Retry Count Tasks (300-302)

# Task 300: Needs 3 attempts to succeed
task=300
hostname=@HOSTNAME@
command=sh
arguments=-c "attempts=$(cat $HOME/.task300_counter 2>/dev/null || echo 0); attempts=$((attempts + 1)); echo $attempts > $HOME/.task300_counter; if [ $attempts -le 2 ]; then echo \"Task 300 - Attempt $attempts fails\"; exit 1; else echo \"Task 300 - Attempt $attempts finally succeeds\"; exit 0; fi"
exec=@EXEC@

# Task 301: Uses increment_counter with success condition for value 2
task=301
hostname=@HOSTNAME@
command=increment_counter.sh
exec=@EXEC@
success=exit_0&stdout~2

# Task 302: Always succeeds (control task)
task=302
hostname=@HOSTNAME@
command=echo
arguments=Task 302 - Control task always succeeds
exec=@EXEC@

# PHASE 4B: Toggle-based Conditional Tasks (400-402)

# Task 400: Toggle exit that should succeed on retry
task=400
hostname=@HOSTNAME@
command=toggle_exit.sh
exec=@EXEC@

# Task 401: File-based toggle simulation
task=401
hostname=@HOSTNAME@
command=sh
arguments=-c "if [ ! -f $HOME/.task401_toggle ]; then touch $HOME/.task401_toggle; echo 'Task 401 - First run fails'; exit 1; else rm $HOME/.task401_toggle; echo 'Task 401 - Second run succeeds'; exit 0; fi"
exec=@EXEC@

# Task 402: Fallback task (should not be reached)
task=402
hostname=@HOSTNAME@
command=echo
arguments=Task 402 - Fallback for non-localhost environment
exec=@EXEC@

# === EXPECTED BEHAVIOR SUMMARY ===
# 
# PHASE 2 (Parallel Retry):
# - Task 100: Succeeds immediately → 3-100
# - Task 101: toggle_exit.sh fails first, succeeds on retry → 3-101.1 (fail), 3-101.2 (success)
# - Task 102: increment_counter.sh needs stdout~2 → May need retry depending on counter state
# - Task 103: File-based retry simulation → 3-103.1 (fail), 3-103.2 (success)
# - Overall: min_success=3 should be met after retries
#
# PHASE 3 (Conditional Retry):
# - Condition: localhost=localhost → TRUE branch (200,201,202)
# - Task 200: Immediate success → 6-200
# - Task 201: toggle_exit.sh retry → 6-201.1 (fail), 6-201.2 (success)  
# - Task 202: Counter-based retry → 6-202.1 (fail), 6-202.2 (success)
# - Overall: min_success=2 should be met
#
# PHASE 4A (High Retry Count Parallel):
# - Task 300: Needs 3 attempts → 9-300.1, 9-300.2, 9-300.3 (success)
# - Task 301: increment_counter.sh with condition → May need retry
# - Task 302: Always succeeds → 9-302
# - Overall: max_failed=1 should be satisfied
#
# PHASE 4B (Toggle Conditional):
# - Condition: localhost=localhost → TRUE branch (400,401)
# - Task 400: toggle_exit.sh → 11-400.1 (fail), 11-400.2 (success)
# - Task 401: File toggle → 11-401.1 (fail), 11-401.2 (success)
# - Overall: all_success should be met after retries
#
# This test comprehensively validates:
# 1. Parallel task retry with consistent display format
# 2. Conditional task retry with consistent display format  
# 3. Mixed retry scenarios with different retry counts and delays
# 4. Success conditions that work with retry logic
# 5. Master timeout enforcement with retry
# 6. Various next conditions (min_success, max_failed, all_success) with retry